Este docuemento corresponde al código ensamblador del algoritmo de zoom 
presentado en alto nivel en el archivo zoom-image.py

# suposiciones iniciales

# En total la memoria a usar tiene 65 535
#   direcciones.

# la memoria de instrucciones tiene
#   735 direcciones de memoria desde la
#   dirección 0 hasta la 734 donde
#   cada dirección es de 32 bits.

# la memoria de datos va a tener 64 800 casillas
#  de memoria desde la 735 hasta la 65 535, donde de la dirección
#  735 hasta la 33134 de almacenan los datos de la imagen de entrada
#  y de la dirección 33135 hasta la 65535 se almacenan de la imagen
#  de salida (con el zoom aplicado)


################# NOTAS 
- la instruccion de salto condicional en mayor qué conviene más tenerla como salto en
desigualdad. En vez de SCM (salto condicional mayor qué) usar un SCD (salto condicional en desigualdad)

- no hace falta la instruccion de funciones y tambien el programa se ocupan todos los registros
por lo que  hay que quitarle la funcionalidad a regristros de función y de stack
##################

# CODIGO

# Seccion del código donde se guardan los valores iniciales
_valores-iniciales:
SUMI R6, R0, 33135
SUMI R2, R0, 3
DIVI R2, R2, 4
MULI R3, R2, 32400
SUMI R2, R0, 3
RSDI R2, R2, 4
MULI R2, R2, 90
SUM R2, R2, R3
RESI R3, R2, 4
DIVI R2, R2, 4
SUM R2, R2, R3
SUMI R2, R2, 735
SUM R7, R0, R0
_pixeles-conocidos:
DIVI R3, R7, 360
RSDI R4, R7, 360
RSDI R3, R3, 4
RSDI R4, R4, 4
SCD R3, R0, _pc-next
SCD R4, R0, _pc-next
DIVI R5, R7, 4
SUM R5, R5, R2
CRG R5, 0, 0(R5)
DIVI R8, R7, 4
SUM R8, R6, R8
GDR R5, 0, 0(R8)
_pc-next:
SUMI R7, R7, 1
SUMI R8, R0, 32400
DIVI R9, R7, 4
SCD R9, R8, _pixeles-conocidos
SUM R7, R0, R0
_completar-columnas:
DIVI R3, R7, 360
RSDI R4, R7, 360
RSDI R3, R3, 4
RSDI R4, R4, 4
SCI R3, R0, _cc-next
SCD R4, R0, _cc-next
MULI R8, R3, 360
RES R8, R7, R8
SUMI R9, R8, 1440
DIVI R10, R8, 4
CRG R10, 0, 0(R10)
DIVI R11, R9, 4
CRG R11, 0, 0(R11)
RES R12, R9, R7
RES R13, R7, R8
RES R14, R9, R8
MUL R10, R10, R12
MUL R11, R11, R13
SUM R11, R11, R10
DIV R11, R11, R14
DIVI R8, R7, 4
SUM R8, R6, R8
GDR R11, 0, 0(R8)
_cc-next:
SUMI R7, R7, 1
SUMI R8, R0, 32130
DIVI R9, R7, 4
SCD R9, R8, _completar-columnas
SUM R7, R0, R0
_completar-valores:
DIVI R3, R7, 360
RSDI R4, R7, 360
RSDI R3, R3, 4
RSDI R4, R4, 4
SCI R4, R0, _cv-next
RES R8, R7, R4
SUMI R9, R8, 4
_cv-load:
SUMI R1, R0, 3
SCI R4, R1, _cv-lcase3
SUMI R1, R0, 2
SCI R4, R1, _cv-lcase2
_cv-lcase1:
DIVI R10, R8, 4
CRG R10, 1, 0(R10)
DIVI R11, R9, 4
CRG R11, 1, 0(R11)
SI _cv-operation
_cv-lcase2:
DIVI R10, R8, 4
CRG R10, 2, 0(R10)
DIVI R11, R9, 4
CRG R11, 2, 0(R11)
SI _cv-operation
_cv-lcase3:
DIVI R10, R8, 4
CRG R10, 3, 0(R10)
DIVI R11, R9, 4
CRG R11, 3, 0(R11)
_cv-operation:
RES R12, R9, R7
RES R13, R7, R8
RES R14, R9, R8
MUL R10, R10, R12
MUL R11, R11, R13
SUM R11, R11, R10
DIV R11, R11, R14
_cv-assign:
SUMI R1, R0, 3
SCI R4, R1, _cv-acase3
SUMI R1, R0, 2
SCI R4, R1, _cv-acase2
_cv-acase1:
DIVI R8, R7, 4
SUM R8, R6, R8
GDR R11, 1, 0(R8)
SI _cv-next
_cv-acase2:
DIVI R8, R7, 4
SUM R8, R6, R8
GDR R11, 2, 0(R8)
SI _cv-next
_cv-acase3:
DIVI R8, R7, 4
SUM R8, R6, R8
GDR R11, 3, 0(R8)
_cv-next:
SUMI R7, R7, 1
SUMI R8, R0, 128510
DIVI R9, R7, 4
SCD R9, R8, _completar-valores
