Este docuemento corresponde al código ensamblador del algoritmo de zoom 
presentado en alto nivel en el archivo zoom-image.py

# suposiciones iniciales

# En total la memoria a usar tiene 65 535
#   direcciones.

# la memoria de instrucciones tiene
#   735 direcciones de memoria desde la
#   dirección 0 hasta la 734 donde
#   cada dirección es de 32 bits.

# la memoria de datos va a tener 64 800 casillas
#  de memoria desde la 735 hasta la 65 535


################# NOTAS 
- la instruccion de salto condicional en mayor qué conviene más tenerla como salto en
desigualdad. En vez de SCM (salto condicional mayor qué) usar un SCD (salto condicional en desigualdad)
##################

# CODIGO

# Seccion del código donde se guardan los valores iniciales
_valores-iniciales:
SUMI R6, R0, 33135  # se guarda en R6 el valor de la dirección inicial de la segunda imagen (con zoom)

# se guarda en R2 el valor de la dirección inicial de análisis de la sección de la imagen sin zoom
# R2 = (seccion // 4) * 360 * 90 + (seccion % 4) * 90
SUM R2, R0, 3       # R2 es el contador para la primera imagen
                    # 3 corresponde a la sección de la imagen a la que se le hará zoom
DIVI R2, R2, 4      # (seccion // 4)
MULTI R3, R2, 32400 # (seccion // 4) * 360 * 90
MULTI R2, R0, 3     
RSDI R2, R2, 4      # (seccion % 4) * 90
SUM R2, R2, R3      # (seccion // 4) * 360 * 90 + (seccion % 4) * 90

SUM R7, R0, R0      # R7 es el contador para el primer ciclo


# Sección del código donde se añaden los pixeles ya conocidos

_pixeles-conocidos:

DIVI R3, R7, 360    # R3 = numFila
RSDI R4, R7, 360    # R4 = numColumna

RSDI R3, R3, 4      # numFila % 4
RSDI R4, R4, 4      # numColumna % 4

# Comprueba que las filas y columnas sean multiplo de 4
SCD R3, R0, pc-next
SCD R4, R0, pc-next

DIVI R5, R7, 4
SUM R5, R5, R2
CRG R5, 0, 0(R5)
DIVI R8, R7, 4
SUM R8, R6, R8
GRD R5, 0, 0(R8)

_pc-next:
SUMI R7, R7, 1
SUMI R8, R0, 32400              # R8 guarda el valor de 360^2
DIVI R9, R7, 4
SCD R9, R8, _pixeles-conocidos  # Condición del while

# Sección del código donde se completan las columnas

SUM R7, R0, R0      # R7 es el contador para el segundo ciclo

_completar-columnas:

DIVI R3, R7, 360    # R3 = numFila
RSDI R4, R7, 360    # R4 = numColumna

RSDI R3, R3, 4      # numFila % 4
RSDI R4, R4, 4      # numColumna % 4

# Comprueba que las columnas sean multiplo de 4, pero las filas no
SCI R3, R0, cc-next
SCD R4, R0, cc-next

# calculo de R8 = ref1 = contador - (numFila % 4 * 360)
#            R9 = ref2 = ref1 + 360 * 4
MULTI R8, R3, 360
SUB R8, R7, R8
SUMI R9, R8, 1440

# calculo de sum1 = ((ref2 - contador) / (ref2 - ref1)) * lista_zoom[ref1]
#            sum2 = ((contador - ref1) / (ref2 - ref1)) * lista_zoom[ref2]

DIVI R10, R8, 4     # R10 = lista_zoom[ref1]
CRG R10, 0, 0(R10)

DIVI R11, R9, 4     # R11 = lista_zoom[ref2]
CRG R11, 0, 0(R11)

RES R12, R9, R7    # R12 = ref2 - contador
RES R13, R7, R8    # R13 = contador - ref1
RES R14, R9, R8    # R14 = ref2 - ref1

MUL R10, R10, R12  # (ref2 - contador)*lista_zoom[ref1]
MUL R11, R11, R13  # (contador - ref1)*lista_zoom[ref2]

SUM R11, R11, R10
DIVI R11, R11, R14

DIVI R8, R7, 4
SUM R8, R6, R8
GRD R11, 0, 0(R8)

_cc-next:
SUMI R7, R7, 1
SUMI R8, R0, 32130              # R8 guarda el valor de 360^2 - 3 * 360
DIVI R9, R7, 4
SCD R9, R8, _completar-columnas  # Condición del while



SUM R7, R0, R0      # R7 es el contador para el segundo ciclo


_completar-valores:

DIVI R3, R7, 360    # R3 = numFila
RSDI R4, R7, 360    # R4 = numColumna

RSDI R3, R3, 4      # numFila % 4
RSDI R4, R4, 4      # numColumna % 4

# Comprueba que las columnas no sean multiplo de 4
SCI R4, R0, cv-next

# calculo de R8 = ref1 = contador - (numColumna % 4)
#            R9 = ref2 = ref1 + 360 * 4
SUB R8, R7, R4
SUMI R9, R8, 4

# calculo de sum1 = ((ref2 - contador) / (ref2 - ref1)) * lista_zoom[ref1]
#            sum2 = ((contador - ref1) / (ref2 - ref1)) * lista_zoom[ref2]

DIVI R10, R8, 4     # R10 = lista_zoom[ref1]
CRG R10, 0, 0(R10)

DIVI R11, R9, 4     # R11 = lista_zoom[ref2]
CRG R11, 0, 0(R11)

RES R12, R9, R7    # R12 = ref2 - contador
RES R13, R7, R8    # R13 = contador - ref1
RES R14, R9, R8    # R14 = ref2 - ref1

MUL R10, R10, R12  # (ref2 - contador)*lista_zoom[ref1]
MUL R11, R11, R13  # (contador - ref1)*lista_zoom[ref2]

SUM R11, R11, R10
DIVI R11, R11, R14

SUMI R1, R0, 3
SCI R8, R1, _cv-case3

SUMI R1, R0, 2
SCI R8, R1, _cv-case2

_cv-case1:

DIVI R8, R7, 4
SUM R8, R6, R8
GRD R11, 1, 0(R8)

SI _cv-next

_cv-case2:

DIVI R8, R7, 4
SUM R8, R6, R8
GRD R11, 2, 0(R8)

SI _cv-next

_cv-case3:

DIVI R8, R7, 4
SUM R8, R6, R8
GRD R11, 3, 0(R8)

_cv-next:
SUMI R7, R7, 1
SUMI R8, R0, 128510             # R8 guarda el valor de 360^2 - 3 * 360 -4
DIVI R9, R7, 4
SCD R9, R8, _completar-valores  # Condición del while



